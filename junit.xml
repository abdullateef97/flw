<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="34" failures="0" errors="0" time="1.819">
  <testsuite name="badRequest" errors="0" failures="0" skipped="0" timestamp="2021-01-30T00:44:14" time="0.734" tests="3">
    <testcase classname="badRequest should return an httpCode of 400" name="badRequest should return an httpCode of 400" time="0.013">
    </testcase>
    <testcase classname="badRequest data should contain a validation object is data is passed" name="badRequest data should contain a validation object is data is passed" time="0.001">
    </testcase>
    <testcase classname="okRequest data should contain a validation object" name="okRequest data should contain a validation object" time="0">
    </testcase>
  </testsuite>
  <testsuite name="fieldChecker" errors="0" failures="0" skipped="0" timestamp="2021-01-30T00:44:14" time="0.164" tests="1">
    <testcase classname="fieldChecker should return ann error if field is not passed" name="fieldChecker should return ann error if field is not passed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="rule validation" errors="0" failures="0" skipped="0" timestamp="2021-01-30T00:44:15" time="0.171" tests="4">
    <testcase classname="rule validation should throw an error if rule is null, empty or not passed" name="rule validation should throw an error if rule is null, empty or not passed" time="0.001">
    </testcase>
    <testcase classname="rule validation should throw an error if field is not passed" name="rule validation should throw an error if field is not passed" time="0">
    </testcase>
    <testcase classname="rule validation should throw an error if condition is not passed" name="rule validation should throw an error if condition is not passed" time="0.001">
    </testcase>
    <testcase classname="rule validation should throw an error if condition_value is not passed" name="rule validation should throw an error if condition_value is not passed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="app" errors="0" failures="0" skipped="0" timestamp="2021-01-30T00:44:14" time="1.297" tests="4">
    <testcase classname="app should export the express app correctly" name="app should export the express app correctly" time="0.003">
    </testcase>
    <testcase classname="app GET / should respond to the GET method with 200" name="app GET / should respond to the GET method with 200" time="0.021">
    </testcase>
    <testcase classname="app GET /404 should respond to the GET method with a 404 for a route that does not exist" name="app GET /404 should respond to the GET method with a 404 for a route that does not exist" time="0.005">
    </testcase>
    <testcase classname="app GET /404 should respond to the POST method with a 404 for a route that does not exist" name="app GET /404 should respond to the POST method with a 404 for a route that does not exist" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="dataValidation" errors="0" failures="0" skipped="0" timestamp="2021-01-30T00:44:14" time="1.396" tests="22">
    <testcase classname="dataValidation should return an error if data is not passed" name="dataValidation should return an error if data is not passed" time="0.004">
    </testcase>
    <testcase classname="dataValidation should return an error if data is of invalid type" name="dataValidation should return an error if data is of invalid type" time="0">
    </testcase>
    <testcase classname="dataValidation should return an error if field is missing from data" name="dataValidation should return an error if field is missing from data" time="0.001">
    </testcase>
    <testcase classname="dataValidation should return an ok response if condition is true" name="dataValidation should return an ok response if condition is true" time="0.002">
    </testcase>
    <testcase classname="dataValidation should throw a badRequest response if condition is false" name="dataValidation should throw a badRequest response if condition is false" time="0.007">
    </testcase>
    <testcase classname="dataValidation should return the right field value for a nested field" name="dataValidation should return the right field value for a nested field" time="0.001">
    </testcase>
    <testcase classname="doesFieldExistInDataObject should return true when field can be found in data" name="doesFieldExistInDataObject should return true when field can be found in data" time="0.001">
    </testcase>
    <testcase classname="doesFieldExistInDataObject should return false when field can be found in data" name="doesFieldExistInDataObject should return false when field can be found in data" time="0">
    </testcase>
    <testcase classname="doesFieldExistInDataObject should return true for a one level nested notation if field is found in data" name="doesFieldExistInDataObject should return true for a one level nested notation if field is found in data" time="0.001">
    </testcase>
    <testcase classname="doesFieldExistInDataObject should return false for a one level nested notation if field is not found in data" name="doesFieldExistInDataObject should return false for a one level nested notation if field is not found in data" time="0">
    </testcase>
    <testcase classname="doesFieldExistInDataObject should return true for a two levels nested notation if field is found in data" name="doesFieldExistInDataObject should return true for a two levels nested notation if field is found in data" time="0">
    </testcase>
    <testcase classname="eqCondition should return true if field value equals condition_value" name="eqCondition should return true if field value equals condition_value" time="0">
    </testcase>
    <testcase classname="eqCondition should return false if field value does not equal condition_value" name="eqCondition should return false if field value does not equal condition_value" time="0.001">
    </testcase>
    <testcase classname="neqCondition should return false if field value equals condition_value" name="neqCondition should return false if field value equals condition_value" time="0">
    </testcase>
    <testcase classname="neqCondition should return true if field value does not equal condition_value" name="neqCondition should return true if field value does not equal condition_value" time="0">
    </testcase>
    <testcase classname="gtCondition should return true if field value is greater than condition_value" name="gtCondition should return true if field value is greater than condition_value" time="0">
    </testcase>
    <testcase classname="gtCondition should return false if field value is less that condition_value" name="gtCondition should return false if field value is less that condition_value" time="0">
    </testcase>
    <testcase classname="gteCondition should return true if field value is greater than condition_value" name="gteCondition should return true if field value is greater than condition_value" time="0.001">
    </testcase>
    <testcase classname="gteCondition should return true if field value equals condition_value" name="gteCondition should return true if field value equals condition_value" time="0">
    </testcase>
    <testcase classname="gteCondition should return false if field value is less that condition_value" name="gteCondition should return false if field value is less that condition_value" time="0">
    </testcase>
    <testcase classname="containsCondition should return true if field value contains condition_value" name="containsCondition should return true if field value contains condition_value" time="0">
    </testcase>
    <testcase classname="containsCondition should return false if field value does not not contain condition_value" name="containsCondition should return false if field value does not not contain condition_value" time="0.001">
    </testcase>
  </testsuite>
</testsuites>